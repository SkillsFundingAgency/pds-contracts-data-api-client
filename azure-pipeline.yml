trigger:
  batch: true
  branches:
    include:
      - main
      - develop

pr: 
  branches:
    include: 
      - main
      - develop

variables:
  buildConfiguration: 'release'

pool:
  vmImage: 'windows-latest'

jobs:
- job: 'BuildAndPublish'
  workspace:
    clean: all
  steps:

  - task: gittools.gitversion.gitversion-task.GitVersion@4
    displayName: GitVersion
    inputs:
      versionSpec: '5.3.x'

  - task: UseDotNet@2
    displayName: Select dotnet core 3.1.x
    inputs:
      packageType: sdk
      version: '3.1.x'

  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: '**/*.csproj'
      feedsToUse: 'select'
      vstsFeed: '9fd46a3f-eada-41dc-86e9-36332aeb8ef1/ecd5af68-0566-42db-8cd7-e71176254aa2'

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  - task: DotNetCoreCLI@2
    displayName: Test
    inputs:
      command: test
      projects: '**/*Tests/*.csproj'
      arguments: '--configuration $(buildConfiguration) --no-build --collect "Code coverage" --filter TestCategory=Unit'

  - task: NuGetCommand@2
    displayName: 'NuGet pack'
    inputs:
      command: pack
      packagesToPack: '**/*.nuspec'
      packDestination: '$(build.artifactstagingdirectory)\DeploymentPackages\Nuget'
      versioningScheme: byEnvVar
      versionEnvVar: GitVersion.MajorMinorPatch

  - task: NuGetCommand@2
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), eq(variables['Build.SourceBranch'], 'refs/heads/main')))
    displayName: 'NuGet push'
    inputs:
      command: push
      publishVstsFeed: '9fd46a3f-eada-41dc-86e9-36332aeb8ef1/ecd5af68-0566-42db-8cd7-e71176254aa2'
      allowPackageConflicts: true
      packagesToPush: "$(build.artifactstagingdirectory)/DeploymentPackages/Nuget/*.nupkg"
